var DATA = {
    "ide": "IDE: Integrated Development Environment is a software application that provides comprehensive facilities to computer programmers for software development.",
    "text-editor": "Text Editor: is a type of computer program that edits plain text.",
    "pseudocode": "Pseudocode: is an informal high-level description of the operating principle of a computer program or other algorithm. It uses the structural conventions of a normal programming language, but is intended for human reading rather than machine reading.",
    "algorithms": "Algorithms: is a finite sequence of well-defined, computer-implementable instructions, typically to solve a class of problems or to perform a computation, calculations, data processing, automated reasoning, and other tasks.",
    "algorithms-examples": "algorithms-examples",
    "selection-sort": "Selection Sort: ",
    "merge-sort": "Merge Sort: ",
    "graph-search": "Graph Search: ",
    "dijkstra-algorithm": "Dijkstra Algorithm",
    "data-architecture": "Data Architecture: is a set of rules, policies, standards and models that govern and define the type of data collected and how it is used, stored, managed and integrated within an organization and its database systems.",
    "data-architecture-examples":"data-architecture-examples", 
    "compiled-language": "Compiled Language: the code you enter is reduced to a set of machine-specific instructions before being saved as an executable file, Programs compiled into native code at compile time tend to be faster than those translated at run time.",
    "interpreted-language": "Interpreted Language: is a type of programming language for which most of its implementations execute instructions directly and freely, without previously compiling a program into machine-language instructions. The interpreter executes the program directly, translating each statement into a sequence of one or more subroutines, and then into another language (often machine code).",
    "strongly-typed": "Strongly Typed: A strongly-typed language is one in which variables are bound to specific data types, and will result in type errors if types do not match up as expected in the expression regardless of when type checking occurs.",
    "loosely-typed": "Loosely Typed: A weakly-typed language on the other hand is a language in which variables are not bound to a specific data type; they still have a type, but type safety constraints are lower compared to strongly-typed languages.",
    "statically-typed": "Statically Typed: In Statically typed languages, once a variable has been declared with a type, it cannot ever be assigned to some other variable of different type and doing so will raise a type error at compile-time.",
    "dynamically-typed": "Dynamically Typed: In Dynamically typed languages, variables are bound to objects at run-time by means of assignment statements, and it is possible to bind the same variables to objects of different types during the execution of the program.",
    "server": "Server: The Server is responsible for serving the web pages depending on the client/end user requirement. It can be either static or dynamic.",
    "client": "Client: A client is a party that requests pages from the server and displays them to the end user. In general a client program is a web browser.",
    "client-side-programming": "Client Side Programming: client-side programming mostly deals with the user interface with which the user interacts in the web. It is mostly a browser, in the user's machine, that runs the code and is mainly done in any scripting language like JavaScript.",
    "server-side-programing": "Server Side Programing: It is the general name for the kind of program that runs directly on the server.",
    "frontend": "Frontend: Frontend developers build how a website looks.",
    "backend": "Backend: Backend developers build how a website works",
    "http": "HTTP: Hypertext Transfer Protocol. At it’s most basic, it allows for the communication between different systems. It’s most commonly used to transfer data from a web server to a browser in order to allow users to view web pages. It’s the protocol that was used for basically all early websites. HTTP is a stateless protocol. This means that the server doesn’t keep any information about the client after it sends its response, and therefore it can’t recognize that multiple requests from the same client may be related.",
    "https": "HTTPS: Hypertext Transfer Protocol Secure. The problem with the regular HTTP protocol is that the information that flows from server to browser is not encrypted, which means it can be easily stolen. HTTPS protocols remedy this by using an SSL (secure sockets layer) certificate, which helps create a secure encrypted connection between the server and the browser.",
    "web-service": "Web Service: a server running on a computer device, listening for requests at a particular port over a network, serving web documents (HTML, JSON, XML, Images), and creating web applications services, which serve in solving specific domain problems over the web (www, internet, HTTP). APIs are web services and REST is an architecture for well behaved web services that can function at internet scale.",
    "request-response-models": "Request/Sesponse Models: is one of the basic methods computers use to communicate with each other, in which the first computer sends a request for some data and the second responds to the request.",
    "query": "Query: A query is a request for data or information from a database table or combination of tables. This data may be generated as results returned by Structured Query Language (SQL) or as pictorials, graphs or complex results.",
    "oop": "OOP:  is a programming paradigm based on the concept of objects, which can contain data, in the form of fields often known as attributes or properties, and code, in the form of procedures often known as methods. A feature of objects is an object's procedures that can access and often modify the data fields of the object with which they are associated objects have a notion of this or self. In OOP, computer programs are designed by making them out of objects that interact with one another. OOP languages are diverse, but the most popular ones are class-based, meaning that objects are instances of classes, which also determine their types.",
    "this": "This: In many object-oriented programming languages, this (also called self or Me) is a variable that is used in instance methods to refer to the object on which they are working.",
    "paradigm": "Paradigm: A programming paradigm is a style or way of programming. Paradigms are not meant to be mutually exclusive; a single program can feature multiple paradigms.",
    "stateless-paradigm": "Stateless Paradigm: Service statelessness is a design principle that is applied within the service-orientation design paradigm, in order to design scalable services by separating them from their state data whenever possible. This results in reduction of the resources consumed by a service as the actual state data management is delegated to an external component or to an architectural extension. By reducing resource consumption, the service can handle more requests in a reliable manner.",
    "Inheritance": "Inheritance: Inheritance is the process of creating new classes, called derived classes, from base classes where an “is-a” relationship exists. The derived class extends from the base class in order to inherit its properties.",
    "Polymorphism": "Polymorphism: Polymorphism is the ability of an object to take on many forms. For example, square, rectangle, circle and triangle classes can have the same parent class Shapes, but each class can have its own method named drawShape().",
    "Abstraction": "Abstraction: Abstraction in OOP refers to showing only the essential features of an object to the user and hiding the other details to reduce complexity.",
    "Encapsulation": "Encapsulation: Encapsulation is an object-oriented programming concept that binds together the data and functions that manipulate the data in a single unit (class). This is normally done to hide the state and representation of an object from outside.",
    "design-patterns": "Design Patterns: a software design pattern is a general, reusable solution to a commonly occurring problem within a given context in software design. It is not a finished design that can be transformed directly into source or machine code. Rather, it is a description or template for how to solve a problem that can be used in many different situations. Design patterns are formalized best practices that the programmer can use to solve common problems when designing an application or system.",
    "orms": "ORMs: Object-Relational Mapping (ORM, O/RM, and O/R mapping tool) is a programming technique for converting data between incompatible type systems using object-oriented programming languages. This creates, in effect, a virtual object database that can be used from within the programming language.",
    "api": "API: is an application program interface (API) that uses HTTP requests to GET, PUT, POST and DELETE data. An API connects the front end with the back end of a web app",
    "api-rest": "API REST: A RESTful API explicitly takes advantage of HTTP methodologies defined by the RFC 2616 protocol, REST APIs are based on URIs (Uniform Resource Identifier, of which a URL is a specific type) and the HTTP protocol, and use JSON for a data format, which is super browser-compatible. They use GET to retrieve a resource; PUT to change the state of or update a resource, which can be an object, file or block; POST to create that resource ; and DELETE to remove it.",
    "rest": "REST: REST technology is generally preferred to the more robust SOAP technology because REST leverages less bandwidth, making it more suitable for internet usage.",
    "soap": "SOAP: Simple Object Access Protocol is its own protocol, and is a bit more complex by defining more standards than REST. Things like security and how messages are sent. These built-in standards do carry a bit more overhead, but can be a deciding factor for organizations that require more comprehensive features in the way of security, transactions, and ACID (Atomicity, Consistency, Isolation, Durability) compliance. Reasons you may want to build an application with a SOAP API include higher levels of security (e.g., a mobile application interfacing with a bank), messaging apps that need reliable communication, or ACID compliance.",
    "json": "Json: JavaScript Object Notation is a lightweight data-interchange format. It is easy for humans to read and write. It is easy for machines to parse and generate. JSON is a text format that is completely language independent but uses conventions that are familiar to programmers of the C-family of languages. SON is built on two structures: A collection of name/value pairs. In various languages, this is realized as an object, record, struct, dictionary, hash table, keyed list, or associative array. An ordered list of values. In most languages, this is realized as an array, vector, list, or sequence.",
    "dom": "DOM: The Document Object Model (DOM) is a programming interface for HTML and XML documents. It represents the page so that programs can change the document structure, style, and content.",
    "debugging": "Debugging: is the process of finding and resolving bugs or problems within a program.",
    "variables": "Variables: variables are containers that hold information. Their sole purpose is labeling data with a descriptive name, so our programs can be understood more clearly by the reader and store it in memory. This data can then be used throughout your program.",
    "data-types": "Data types: The data type of a value (or variable in some contexts) is an attribute that tells what kind of data that value can have. Most often the term is used in connection with static typing of variables in programming languages like C/C++, Java and C# etc, where the type of a variable is known at compile time. Data types include the storage classifications like integers, floating point values, strings, characters etc. Data types define particular characteristics of data used in software programs and inform the compilers about predefined attributes required by specific variables or associated data objects.",
    "pointer": "Pointer: A pointer is a variable that holds the memory address of another variable.",
    "references": "References: A reference variable is another name for already existing variable.",
    "array-list": "Array/List: An array is a data structure that contains a group of elements. Typically these elements are all of the same data type, such as an integer or string. Arrays are commonly used in computer programs to organize data so that a related set of values can be easily sorted or searched.",
    "string": "String: a  string is a data type used in programming, such as an integer and floating point unit, but is used to represent text rather than numbers. It is comprised of a set of characters that can also contain spaces and numbers. Typically, programmers must enclose strings in quotation marks for the data to recognized as a string and not a number or variable name.",
    "interger": "Interger: An integer is a whole number (not a fraction) that can be positive, negative, or zero. Therefore, the numbers 10, 0, -25, and 5,148 are all integers. Unlike floating point numbers, integers cannot have decimal places.",
    "boolean": "Boolean: Boolean, or boolean logic, is a subset of algebra used for creating true/false statements. Boolean expressions use the operators AND, OR, XOR, and NOT to compare values and return a true or false result.",
    "float": "Float: As the name implies, floating point numbers are numbers that contain floating decimal points. For example, the numbers 5.5, 0.001, and -2,345.6789 are floating point numbers. Numbers that do not have decimal places are called integers.",
    "promise": "JavaScritp Promises: A promise is an object that may produce a single value some time in the future: either a resolved value, or a reason that it’s not resolved (e.g., a network error occurred). A promise is an object which can be returned synchronously from an asynchronous function. It will be in one of 3 possible states: fulfilled, rejected, or pending. Promise users can attach callbacks to handle the fulfilled value or the reason for rejection.",
    "primitive-values": "Primitive Values: Primitive types are the most basic data types available within the Java language. There are 8: boolean, byte, char, short, int, long, float and double. These types serve as the building blocks of data manipulation in Java. Such types serve only one purpose — containing pure, simple values of a kind. Because these data types are defined into the Java type system by default, they come with a number of operations predefined. You can not define a new operation for such primitive types.",
    "functions": "Functions: A function is a block of organized, reusable code that is used to perform a single, related action. Functions provide better modularity for your application and a high degree of code reusing.",
    "parameter": "Parameter: A parameter is a special kind of variable in computer programming language that is used to pass information between functions or procedures. The actual information passed is called an argument.",
    "class": "Class: In object-oriented programming, a class is an extensible program-code-template for creating objects, providing initial values for state (member variables) and implementations of behavior (member functions or methods). In many languages, the class name is used as the name for the class (the template itself), the name for the default constructor of the class (a subroutine that creates objects), and as the type of objects generated by instantiating the class; these distinct concepts are easily conflated.When an object is created by a constructor of the class, the resulting object is called an instance of the class, and the member variables specific to the object are called instance variables, to contrast with the class variables shared across the class.",
    "class-variable": "Class Variables: In object-oriented programming with classes, a class variable is any variable declared with the static modifier of which a single copy exists, regardless of how many instances of the class exist.",
    "super": "Super: super is used to call the constructor , methods and properties of parent class. You may also use the super keyword in the sub class when you want to invoke a method from the parent class when you have overridden it in the subclass.",
    "properties": "Properties: A property, in some object-oriented programming languages, is a special sort of class member, intermediate in functionality between a field (or data member) and a method. The syntax for reading and writing of properties is like for fields, but property reads and writes are (usually) translated to 'getter' and 'setter' method calls.",
    "constructor": "Constructor: A constructor is a method that is called at the beginning of an object's lifetime to create and initialize the object, a process called construction (or instantiation). Initialization may include an acquisition of resources. Constructors may have parameters but usually do not return values in most languages.",
    "finalizer": "Finalizer: In garbage-collected languages, such as Java, C#, and Python, destructors are known as finalizers. They have a similar purpose and function to destructors, but because of the differences between languages that utilize garbage-collection and languages with manual memory management, the sequence in which they are called is different.",
    "instance": "Instance: instance is a concrete occurrence of any object, existing usually during the runtime of a computer program. Formally, instance is synonymous with object as they are each a particular value.",
    "object": "Object: In computer science, an object can be a variable, a data structure, a function, or a method, and as such, is a value in memory referenced by an identifier. In the class-based object-oriented programming paradigm, object refers to a particular instance of a class, where the object can be a combination of variables, functions, and data structures. In relational database management, an object can be a table or column, or an association between data and a database entity (such as relating a person's age to a specific person).",
    "object-reference": "Object Reference: A reference is an address that indicates where an object's variables and methods are stored. You aren't actually using objects when you assign an object to a variable or pass an object to a method as an argument. Instead, you are using references to those objects.",
    "methods": "Methods: The behavior of class or its instances is defined using methods. Methods are subroutines with the ability to operate on objects or classes. These operations may alter the state of an object or simply provide ways of accessing it.",
    "static-methods": "Static methods: Static methods are meant to be relevant to all the instances of a class rather than to any specific instance. They are similar to static variables in that sense.",
    "built-in-functions": "Built-in functions: A function that is built-in, is in essence a part of the language, something you can access immediately when using the language, and you can rely on it being in any implementation of the language.",
    "libraries": "Libraries: A library is a bunch of reusable code that you can include inside your program.  This lets you quickly access useful functionality. Essentially, you use a library to fill holes inside of your program.",
    "frameworks": "Frameworks:  you put your code inside a framework. It's reusable code that you use to structure your whole program. It's like a library that goes on the outside. Essentially, you use your program to fill holes inside the framework. Another way of thinking about it is that a framework is a library combined with a preset way to organize your code. It's reusable code bundled in a reusable (but often inflexible) architecture.",
    "npm": "NPM: npm is the package manager for the Node JavaScript platform. It puts modules in place so that node can find them, and manages dependency conflicts intelligently. Most commonly, it is used to publish, discover, install, and develop node programs.",
    "webpack": "Webpack: Webpack (stylised webpack) is an open-source JavaScript module bundler. ... Webpack takes modules with dependencies and generates static assets representing those modules.Webpack is a command line tool to create bundles of assets (code and files). Webpack doesn't run on the server or the browser. Webpack takes all your javascript files and any other assets and transforms then into one huge file. This big file can then be sent by the server to a client's browser.",
    "runtime-environment": "Runtime Environment: a runtime system, also called runtime environment, primarily implements portions of an execution model. This is not to be confused with the runtime lifecycle phase of a program, during which the runtime system is in operation. Most languages have some form of runtime system that provides an environment in which programs run. This environment may address a number of issues including the layout of application memory, how the program accesses variables, mechanisms for passing parameters between procedures, interfacing with the operating system, and otherwise. The compiler makes assumptions depending on the specific runtime system to generate correct code. Typically the runtime system will have some responsibility for setting up and managing the stack and heap, and may include features such as garbage collection, threads or other dynamic features built into the language.",
    "open-source": "Open-Source: Open-source software (OSS) is any computer software that's distributed with its source code available for modification.",
    "cross-platform": "Cross-Platform: is computer software that is implemented on multiple computing platforms. Cross-platform software may be divided into two types; one requires individual building or compilation for each platform that it supports, and the other one can be directly run on any platform without special preparation",
    "fetch": "Fetch: Fetch describes the process of a software program, script, or hardware device retrieving data and then moving it to an alternate location or displaying it."
};

function printer(){
    console.log(DATA);
}